{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","IntegerStep","span","min","max","onChange","this","props","onChildChange","value","inputValue","style","marginLeft","React","Component","IntegerStepMultiplier","onMultiplierChange","inputMultiplier","App","state","multiplier","setState","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,kC,gLCMrCC,E,iLAEF,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,KAAM,IACT,kBAAC,IAAD,CACEC,IAAK,EACLC,IAAK,GACLC,SAAUC,KAAKC,MAAMC,cACrBC,MAAwC,kBAA1BH,KAAKC,MAAMG,WAA0BJ,KAAKC,MAAMG,WAAa,KAG/E,kBAAC,IAAD,CAAKR,KAAM,GACT,kBAAC,IAAD,CACEC,IAAK,EACLC,IAAK,GACLO,MAAO,CAAEC,WAAY,IACrBH,MAAOH,KAAKC,MAAMG,WAClBL,SAAUC,KAAKC,MAAMC,sB,GAlBPK,IAAMC,WA0B1BC,E,iLAEF,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKb,KAAM,IACT,kBAAC,IAAD,CACEC,IAAK,EACLC,IAAK,GACLC,SAAUC,KAAKC,MAAMS,mBACrBP,MACwC,kBAA/BH,KAAKC,MAAMU,gBACdX,KAAKC,MAAMU,gBACX,KAIV,kBAAC,IAAD,CAAKf,KAAM,GACT,kBAAC,IAAD,CACEC,IAAK,EACLC,IAAK,GACLO,MAAO,CAAEC,WAAY,IACrBH,MAAOH,KAAKC,MAAMU,gBAClBZ,SAAUC,KAAKC,MAAMS,2B,GAtBGH,IAAMC,WAyE3BI,E,2MAzCbC,MAAQ,CACNT,WAAY,EACZU,WAAY,G,EAGdZ,cAAgB,SAAAC,GACd,EAAKY,SAAS,iBAAO,CACnBX,WAAYD,M,EAIhBO,mBAAqB,SAAAP,GACnB,EAAKY,SAAS,iBAAO,CACnBD,WAAYX,M,wEAId,OACE,yBAAKa,UAAU,OACb,4BAAQA,UAAU,cAAlB,UAEE,kBAAC,EAAD,CACEd,cAAeF,KAAKE,cACpBE,WAAYJ,KAAKa,MAAMT,aAJ3B,cAOE,kBAAC,EAAD,CACEM,mBAAoBV,KAAKU,mBACzBC,gBAAiBX,KAAKa,MAAMC,aAE9B,2BACG,IADH,sDAEqD,uBAAGE,UAAU,SAAShB,KAAKa,MAAMT,WAAjC,KAFrD,mCAEsI,uBAAGY,UAAU,SAAShB,KAAKa,MAAMC,YAFvK,IAEuL,uBAAGE,UAAU,UAAb,WACpLhB,KAAKa,MAAMT,WAAaJ,KAAKa,MAAMC,WADiJ,Y,GAjC/KP,IAAMC,WCnDJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.a44e7d1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport 'antd/dist/antd.css'\nimport { Slider, InputNumber, Row, Col } from \"antd\"\n\n\nclass IntegerStep extends React.Component {\n   render() {\n    return (\n      <Row>\n        <Col span={12}>\n          <Slider\n            min={0}\n            max={20}\n            onChange={this.props.onChildChange}\n            value={typeof this.props.inputValue === \"number\" ? this.props.inputValue : 0}\n          />\n        </Col>\n        <Col span={4}>\n          <InputNumber\n            min={0}\n            max={20}\n            style={{ marginLeft: 16 }}\n            value={this.props.inputValue}\n            onChange={this.props.onChildChange}\n          />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nclass IntegerStepMultiplier extends React.Component {\n  render() {\n    return (\n      <Row>\n        <Col span={12}>\n          <Slider\n            min={0}\n            max={20}\n            onChange={this.props.onMultiplierChange}\n            value={\n              typeof this.props.inputMultiplier === \"number\"\n                ? this.props.inputMultiplier\n                : 0\n            }\n          />\n        </Col>\n        <Col span={4}>\n          <InputNumber\n            min={0}\n            max={20}\n            style={{ marginLeft: 16 }}\n            value={this.props.inputMultiplier}\n            onChange={this.props.onMultiplierChange}\n          />\n        </Col>\n      </Row>\n    )\n  }\n}\n\n\nclass App extends React.Component {\n  state = {\n    inputValue: 0,\n    multiplier: 0\n  }\n\n  onChildChange = value => {\n    this.setState(() => ({\n      inputValue: value\n    }))\n  }\n\n  onMultiplierChange = value => {\n    this.setState(() => ({\n      multiplier: value\n    }))\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Factor:\n          <IntegerStep\n            onChildChange={this.onChildChange}\n            inputValue={this.state.inputValue}\n          />\n          Multiplier:\n          <IntegerStepMultiplier\n            onMultiplierChange={this.onMultiplierChange}\n            inputMultiplier={this.state.multiplier}\n          />\n          <p>\n            {\" \"}\n            Change the slider to see the result of the factor, <b className=\"input\">{this.state.inputValue} </b>. Multiplied by the multiplier, <b className=\"input\">{this.state.multiplier}</b> <b className=\"result\">Result :\n            {this.state.inputValue * this.state.multiplier} </b>\n          </p>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}